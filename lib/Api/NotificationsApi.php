<?php
/**
 * NotificationsApi
 * PHP version 5
 *
 * @category Class
 * @package  ProcessMaker\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * ProcessMaker API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@processmaker.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.0-beta2
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ProcessMaker\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use ProcessMaker\Client\ApiException;
use ProcessMaker\Client\Configuration;
use ProcessMaker\Client\HeaderSelector;
use ProcessMaker\Client\ObjectSerializer;

/**
 * NotificationsApi Class Doc Comment
 *
 * @category Class
 * @package  ProcessMaker\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class NotificationsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createNotification
     *
     * Save a new notifications
     *
     * @param  \ProcessMaker\Client\Model\NotificationsEditable $notifications_editable notifications_editable (required)
     *
     * @throws \ProcessMaker\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ProcessMaker\Client\Model\Notifications
     */
    public function createNotification($notifications_editable)
    {
        list($response) = $this->createNotificationWithHttpInfo($notifications_editable);
        return $response;
    }

    /**
     * Operation createNotificationWithHttpInfo
     *
     * Save a new notifications
     *
     * @param  \ProcessMaker\Client\Model\NotificationsEditable $notifications_editable (required)
     *
     * @throws \ProcessMaker\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ProcessMaker\Client\Model\Notifications, HTTP status code, HTTP response headers (array of strings)
     */
    public function createNotificationWithHttpInfo($notifications_editable)
    {
        $request = $this->createNotificationRequest($notifications_editable);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 201:
                    if ('\ProcessMaker\Client\Model\Notifications' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ProcessMaker\Client\Model\Notifications', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ProcessMaker\Client\Model\Notifications';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ProcessMaker\Client\Model\Notifications',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createNotificationAsync
     *
     * Save a new notifications
     *
     * @param  \ProcessMaker\Client\Model\NotificationsEditable $notifications_editable (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNotificationAsync($notifications_editable)
    {
        return $this->createNotificationAsyncWithHttpInfo($notifications_editable)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createNotificationAsyncWithHttpInfo
     *
     * Save a new notifications
     *
     * @param  \ProcessMaker\Client\Model\NotificationsEditable $notifications_editable (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNotificationAsyncWithHttpInfo($notifications_editable)
    {
        $returnType = '\ProcessMaker\Client\Model\Notifications';
        $request = $this->createNotificationRequest($notifications_editable);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createNotification'
     *
     * @param  \ProcessMaker\Client\Model\NotificationsEditable $notifications_editable (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createNotificationRequest($notifications_editable)
    {
        // verify the required parameter 'notifications_editable' is set
        if ($notifications_editable === null || (is_array($notifications_editable) && count($notifications_editable) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $notifications_editable when calling createNotification'
            );
        }

        $resourcePath = '/notifications';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($notifications_editable)) {
            $_tempBody = $notifications_editable;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteNotification
     *
     * Delete a notification
     *
     * @param  string $notification_id ID of notification to return (required)
     *
     * @throws \ProcessMaker\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ProcessMaker\Client\Model\Notifications
     */
    public function deleteNotification($notification_id)
    {
        list($response) = $this->deleteNotificationWithHttpInfo($notification_id);
        return $response;
    }

    /**
     * Operation deleteNotificationWithHttpInfo
     *
     * Delete a notification
     *
     * @param  string $notification_id ID of notification to return (required)
     *
     * @throws \ProcessMaker\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ProcessMaker\Client\Model\Notifications, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteNotificationWithHttpInfo($notification_id)
    {
        $request = $this->deleteNotificationRequest($notification_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 204:
                    if ('\ProcessMaker\Client\Model\Notifications' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ProcessMaker\Client\Model\Notifications', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ProcessMaker\Client\Model\Notifications';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ProcessMaker\Client\Model\Notifications',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteNotificationAsync
     *
     * Delete a notification
     *
     * @param  string $notification_id ID of notification to return (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteNotificationAsync($notification_id)
    {
        return $this->deleteNotificationAsyncWithHttpInfo($notification_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteNotificationAsyncWithHttpInfo
     *
     * Delete a notification
     *
     * @param  string $notification_id ID of notification to return (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteNotificationAsyncWithHttpInfo($notification_id)
    {
        $returnType = '\ProcessMaker\Client\Model\Notifications';
        $request = $this->deleteNotificationRequest($notification_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteNotification'
     *
     * @param  string $notification_id ID of notification to return (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteNotificationRequest($notification_id)
    {
        // verify the required parameter 'notification_id' is set
        if ($notification_id === null || (is_array($notification_id) && count($notification_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $notification_id when calling deleteNotification'
            );
        }

        $resourcePath = '/notifications/notificationId';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($notification_id !== null) {
            $resourcePath = str_replace(
                '{' . 'notification_id' . '}',
                ObjectSerializer::toPathValue($notification_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNotificationById
     *
     * Get single notification by ID
     *
     * @param  string $notification_id ID of notification to return (required)
     *
     * @throws \ProcessMaker\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ProcessMaker\Client\Model\Notifications
     */
    public function getNotificationById($notification_id)
    {
        list($response) = $this->getNotificationByIdWithHttpInfo($notification_id);
        return $response;
    }

    /**
     * Operation getNotificationByIdWithHttpInfo
     *
     * Get single notification by ID
     *
     * @param  string $notification_id ID of notification to return (required)
     *
     * @throws \ProcessMaker\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ProcessMaker\Client\Model\Notifications, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNotificationByIdWithHttpInfo($notification_id)
    {
        $request = $this->getNotificationByIdRequest($notification_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\ProcessMaker\Client\Model\Notifications' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ProcessMaker\Client\Model\Notifications', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ProcessMaker\Client\Model\Notifications';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ProcessMaker\Client\Model\Notifications',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNotificationByIdAsync
     *
     * Get single notification by ID
     *
     * @param  string $notification_id ID of notification to return (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNotificationByIdAsync($notification_id)
    {
        return $this->getNotificationByIdAsyncWithHttpInfo($notification_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNotificationByIdAsyncWithHttpInfo
     *
     * Get single notification by ID
     *
     * @param  string $notification_id ID of notification to return (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNotificationByIdAsyncWithHttpInfo($notification_id)
    {
        $returnType = '\ProcessMaker\Client\Model\Notifications';
        $request = $this->getNotificationByIdRequest($notification_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNotificationById'
     *
     * @param  string $notification_id ID of notification to return (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getNotificationByIdRequest($notification_id)
    {
        // verify the required parameter 'notification_id' is set
        if ($notification_id === null || (is_array($notification_id) && count($notification_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $notification_id when calling getNotificationById'
            );
        }

        $resourcePath = '/notifications/notificationId';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($notification_id !== null) {
            $resourcePath = str_replace(
                '{' . 'notification_id' . '}',
                ObjectSerializer::toPathValue($notification_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNotifications
     *
     * Returns all notifications that the user has access to
     *
     * @param  string $status Only return notifications by status (unread, all, etc.) (optional)
     * @param  string $filter Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring. (optional)
     * @param  string $order_by Field to order results by (optional)
     * @param  string $order_direction order_direction (optional, default to 'asc')
     * @param  int $per_page per_page (optional, default to 10)
     * @param  string $include Include data from related models in payload. Comma seperated list. (optional)
     *
     * @throws \ProcessMaker\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ProcessMaker\Client\Model\InlineResponse20010
     */
    public function getNotifications($status = null, $filter = null, $order_by = null, $order_direction = 'asc', $per_page = 10, $include = null)
    {
        list($response) = $this->getNotificationsWithHttpInfo($status, $filter, $order_by, $order_direction, $per_page, $include);
        return $response;
    }

    /**
     * Operation getNotificationsWithHttpInfo
     *
     * Returns all notifications that the user has access to
     *
     * @param  string $status Only return notifications by status (unread, all, etc.) (optional)
     * @param  string $filter Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring. (optional)
     * @param  string $order_by Field to order results by (optional)
     * @param  string $order_direction (optional, default to 'asc')
     * @param  int $per_page (optional, default to 10)
     * @param  string $include Include data from related models in payload. Comma seperated list. (optional)
     *
     * @throws \ProcessMaker\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ProcessMaker\Client\Model\InlineResponse20010, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNotificationsWithHttpInfo($status = null, $filter = null, $order_by = null, $order_direction = 'asc', $per_page = 10, $include = null)
    {
        $request = $this->getNotificationsRequest($status, $filter, $order_by, $order_direction, $per_page, $include);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\ProcessMaker\Client\Model\InlineResponse20010' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ProcessMaker\Client\Model\InlineResponse20010', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ProcessMaker\Client\Model\InlineResponse20010';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ProcessMaker\Client\Model\InlineResponse20010',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNotificationsAsync
     *
     * Returns all notifications that the user has access to
     *
     * @param  string $status Only return notifications by status (unread, all, etc.) (optional)
     * @param  string $filter Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring. (optional)
     * @param  string $order_by Field to order results by (optional)
     * @param  string $order_direction (optional, default to 'asc')
     * @param  int $per_page (optional, default to 10)
     * @param  string $include Include data from related models in payload. Comma seperated list. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNotificationsAsync($status = null, $filter = null, $order_by = null, $order_direction = 'asc', $per_page = 10, $include = null)
    {
        return $this->getNotificationsAsyncWithHttpInfo($status, $filter, $order_by, $order_direction, $per_page, $include)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNotificationsAsyncWithHttpInfo
     *
     * Returns all notifications that the user has access to
     *
     * @param  string $status Only return notifications by status (unread, all, etc.) (optional)
     * @param  string $filter Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring. (optional)
     * @param  string $order_by Field to order results by (optional)
     * @param  string $order_direction (optional, default to 'asc')
     * @param  int $per_page (optional, default to 10)
     * @param  string $include Include data from related models in payload. Comma seperated list. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNotificationsAsyncWithHttpInfo($status = null, $filter = null, $order_by = null, $order_direction = 'asc', $per_page = 10, $include = null)
    {
        $returnType = '\ProcessMaker\Client\Model\InlineResponse20010';
        $request = $this->getNotificationsRequest($status, $filter, $order_by, $order_direction, $per_page, $include);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNotifications'
     *
     * @param  string $status Only return notifications by status (unread, all, etc.) (optional)
     * @param  string $filter Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring. (optional)
     * @param  string $order_by Field to order results by (optional)
     * @param  string $order_direction (optional, default to 'asc')
     * @param  int $per_page (optional, default to 10)
     * @param  string $include Include data from related models in payload. Comma seperated list. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getNotificationsRequest($status = null, $filter = null, $order_by = null, $order_direction = 'asc', $per_page = 10, $include = null)
    {

        $resourcePath = '/notifications';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($filter !== null) {
            $queryParams['filter'] = ObjectSerializer::toQueryValue($filter);
        }
        // query params
        if ($order_by !== null) {
            $queryParams['order_by'] = ObjectSerializer::toQueryValue($order_by);
        }
        // query params
        if ($order_direction !== null) {
            $queryParams['order_direction'] = ObjectSerializer::toQueryValue($order_direction);
        }
        // query params
        if ($per_page !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($per_page);
        }
        // query params
        if ($include !== null) {
            $queryParams['include'] = ObjectSerializer::toQueryValue($include);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation processMakerHttpControllersApiNotificationControllerUpdateAsRead
     *
     * Mark notifications as read by the user
     *
     * @param  \ProcessMaker\Client\Model\InlineObject2 $inline_object2 inline_object2 (required)
     *
     * @throws \ProcessMaker\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function processMakerHttpControllersApiNotificationControllerUpdateAsRead($inline_object2)
    {
        $this->processMakerHttpControllersApiNotificationControllerUpdateAsReadWithHttpInfo($inline_object2);
    }

    /**
     * Operation processMakerHttpControllersApiNotificationControllerUpdateAsReadWithHttpInfo
     *
     * Mark notifications as read by the user
     *
     * @param  \ProcessMaker\Client\Model\InlineObject2 $inline_object2 (required)
     *
     * @throws \ProcessMaker\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function processMakerHttpControllersApiNotificationControllerUpdateAsReadWithHttpInfo($inline_object2)
    {
        $request = $this->processMakerHttpControllersApiNotificationControllerUpdateAsReadRequest($inline_object2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation processMakerHttpControllersApiNotificationControllerUpdateAsReadAsync
     *
     * Mark notifications as read by the user
     *
     * @param  \ProcessMaker\Client\Model\InlineObject2 $inline_object2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function processMakerHttpControllersApiNotificationControllerUpdateAsReadAsync($inline_object2)
    {
        return $this->processMakerHttpControllersApiNotificationControllerUpdateAsReadAsyncWithHttpInfo($inline_object2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation processMakerHttpControllersApiNotificationControllerUpdateAsReadAsyncWithHttpInfo
     *
     * Mark notifications as read by the user
     *
     * @param  \ProcessMaker\Client\Model\InlineObject2 $inline_object2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function processMakerHttpControllersApiNotificationControllerUpdateAsReadAsyncWithHttpInfo($inline_object2)
    {
        $returnType = '';
        $request = $this->processMakerHttpControllersApiNotificationControllerUpdateAsReadRequest($inline_object2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'processMakerHttpControllersApiNotificationControllerUpdateAsRead'
     *
     * @param  \ProcessMaker\Client\Model\InlineObject2 $inline_object2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function processMakerHttpControllersApiNotificationControllerUpdateAsReadRequest($inline_object2)
    {
        // verify the required parameter 'inline_object2' is set
        if ($inline_object2 === null || (is_array($inline_object2) && count($inline_object2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inline_object2 when calling processMakerHttpControllersApiNotificationControllerUpdateAsRead'
            );
        }

        $resourcePath = '/read_notifications';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($inline_object2)) {
            $_tempBody = $inline_object2;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation processMakerHttpControllersApiNotificationControllerUpdateAsReadAll
     *
     * Mark notifications as read by id and type
     *
     * @param  \ProcessMaker\Client\Model\InlineObject3 $inline_object3 inline_object3 (required)
     *
     * @throws \ProcessMaker\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function processMakerHttpControllersApiNotificationControllerUpdateAsReadAll($inline_object3)
    {
        $this->processMakerHttpControllersApiNotificationControllerUpdateAsReadAllWithHttpInfo($inline_object3);
    }

    /**
     * Operation processMakerHttpControllersApiNotificationControllerUpdateAsReadAllWithHttpInfo
     *
     * Mark notifications as read by id and type
     *
     * @param  \ProcessMaker\Client\Model\InlineObject3 $inline_object3 (required)
     *
     * @throws \ProcessMaker\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function processMakerHttpControllersApiNotificationControllerUpdateAsReadAllWithHttpInfo($inline_object3)
    {
        $request = $this->processMakerHttpControllersApiNotificationControllerUpdateAsReadAllRequest($inline_object3);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation processMakerHttpControllersApiNotificationControllerUpdateAsReadAllAsync
     *
     * Mark notifications as read by id and type
     *
     * @param  \ProcessMaker\Client\Model\InlineObject3 $inline_object3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function processMakerHttpControllersApiNotificationControllerUpdateAsReadAllAsync($inline_object3)
    {
        return $this->processMakerHttpControllersApiNotificationControllerUpdateAsReadAllAsyncWithHttpInfo($inline_object3)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation processMakerHttpControllersApiNotificationControllerUpdateAsReadAllAsyncWithHttpInfo
     *
     * Mark notifications as read by id and type
     *
     * @param  \ProcessMaker\Client\Model\InlineObject3 $inline_object3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function processMakerHttpControllersApiNotificationControllerUpdateAsReadAllAsyncWithHttpInfo($inline_object3)
    {
        $returnType = '';
        $request = $this->processMakerHttpControllersApiNotificationControllerUpdateAsReadAllRequest($inline_object3);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'processMakerHttpControllersApiNotificationControllerUpdateAsReadAll'
     *
     * @param  \ProcessMaker\Client\Model\InlineObject3 $inline_object3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function processMakerHttpControllersApiNotificationControllerUpdateAsReadAllRequest($inline_object3)
    {
        // verify the required parameter 'inline_object3' is set
        if ($inline_object3 === null || (is_array($inline_object3) && count($inline_object3) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inline_object3 when calling processMakerHttpControllersApiNotificationControllerUpdateAsReadAll'
            );
        }

        $resourcePath = '/read_all_notifications';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($inline_object3)) {
            $_tempBody = $inline_object3;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateNotification
     *
     * Update a notification
     *
     * @param  string $notification_id ID of notification to return (required)
     * @param  \ProcessMaker\Client\Model\NotificationsEditable $notifications_editable notifications_editable (required)
     *
     * @throws \ProcessMaker\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ProcessMaker\Client\Model\Notifications
     */
    public function updateNotification($notification_id, $notifications_editable)
    {
        list($response) = $this->updateNotificationWithHttpInfo($notification_id, $notifications_editable);
        return $response;
    }

    /**
     * Operation updateNotificationWithHttpInfo
     *
     * Update a notification
     *
     * @param  string $notification_id ID of notification to return (required)
     * @param  \ProcessMaker\Client\Model\NotificationsEditable $notifications_editable (required)
     *
     * @throws \ProcessMaker\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ProcessMaker\Client\Model\Notifications, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateNotificationWithHttpInfo($notification_id, $notifications_editable)
    {
        $request = $this->updateNotificationRequest($notification_id, $notifications_editable);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\ProcessMaker\Client\Model\Notifications' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ProcessMaker\Client\Model\Notifications', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ProcessMaker\Client\Model\Notifications';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ProcessMaker\Client\Model\Notifications',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateNotificationAsync
     *
     * Update a notification
     *
     * @param  string $notification_id ID of notification to return (required)
     * @param  \ProcessMaker\Client\Model\NotificationsEditable $notifications_editable (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateNotificationAsync($notification_id, $notifications_editable)
    {
        return $this->updateNotificationAsyncWithHttpInfo($notification_id, $notifications_editable)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateNotificationAsyncWithHttpInfo
     *
     * Update a notification
     *
     * @param  string $notification_id ID of notification to return (required)
     * @param  \ProcessMaker\Client\Model\NotificationsEditable $notifications_editable (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateNotificationAsyncWithHttpInfo($notification_id, $notifications_editable)
    {
        $returnType = '\ProcessMaker\Client\Model\Notifications';
        $request = $this->updateNotificationRequest($notification_id, $notifications_editable);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateNotification'
     *
     * @param  string $notification_id ID of notification to return (required)
     * @param  \ProcessMaker\Client\Model\NotificationsEditable $notifications_editable (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateNotificationRequest($notification_id, $notifications_editable)
    {
        // verify the required parameter 'notification_id' is set
        if ($notification_id === null || (is_array($notification_id) && count($notification_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $notification_id when calling updateNotification'
            );
        }
        // verify the required parameter 'notifications_editable' is set
        if ($notifications_editable === null || (is_array($notifications_editable) && count($notifications_editable) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $notifications_editable when calling updateNotification'
            );
        }

        $resourcePath = '/notifications/notificationId';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($notification_id !== null) {
            $resourcePath = str_replace(
                '{' . 'notification_id' . '}',
                ObjectSerializer::toPathValue($notification_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($notifications_editable)) {
            $_tempBody = $notifications_editable;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
