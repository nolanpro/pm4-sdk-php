<?php
/**
 * EnvironmentVariablesApi
 * PHP version 5
 *
 * @category Class
 * @package  ProcessMaker\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * ProcessMaker API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@processmaker.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.0-beta2
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ProcessMaker\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use ProcessMaker\Client\ApiException;
use ProcessMaker\Client\Configuration;
use ProcessMaker\Client\HeaderSelector;
use ProcessMaker\Client\ObjectSerializer;

/**
 * EnvironmentVariablesApi Class Doc Comment
 *
 * @category Class
 * @package  ProcessMaker\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class EnvironmentVariablesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createEnvironmentVariables
     *
     * Save a new environment_variables
     *
     * @param  \ProcessMaker\Client\Model\EnvironmentVariablesEditable $environment_variables_editable environment_variables_editable (required)
     *
     * @throws \ProcessMaker\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ProcessMaker\Client\Model\EnvironmentVariables
     */
    public function createEnvironmentVariables($environment_variables_editable)
    {
        list($response) = $this->createEnvironmentVariablesWithHttpInfo($environment_variables_editable);
        return $response;
    }

    /**
     * Operation createEnvironmentVariablesWithHttpInfo
     *
     * Save a new environment_variables
     *
     * @param  \ProcessMaker\Client\Model\EnvironmentVariablesEditable $environment_variables_editable (required)
     *
     * @throws \ProcessMaker\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ProcessMaker\Client\Model\EnvironmentVariables, HTTP status code, HTTP response headers (array of strings)
     */
    public function createEnvironmentVariablesWithHttpInfo($environment_variables_editable)
    {
        $request = $this->createEnvironmentVariablesRequest($environment_variables_editable);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 201:
                    if ('\ProcessMaker\Client\Model\EnvironmentVariables' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ProcessMaker\Client\Model\EnvironmentVariables', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ProcessMaker\Client\Model\EnvironmentVariables';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ProcessMaker\Client\Model\EnvironmentVariables',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createEnvironmentVariablesAsync
     *
     * Save a new environment_variables
     *
     * @param  \ProcessMaker\Client\Model\EnvironmentVariablesEditable $environment_variables_editable (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createEnvironmentVariablesAsync($environment_variables_editable)
    {
        return $this->createEnvironmentVariablesAsyncWithHttpInfo($environment_variables_editable)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createEnvironmentVariablesAsyncWithHttpInfo
     *
     * Save a new environment_variables
     *
     * @param  \ProcessMaker\Client\Model\EnvironmentVariablesEditable $environment_variables_editable (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createEnvironmentVariablesAsyncWithHttpInfo($environment_variables_editable)
    {
        $returnType = '\ProcessMaker\Client\Model\EnvironmentVariables';
        $request = $this->createEnvironmentVariablesRequest($environment_variables_editable);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createEnvironmentVariables'
     *
     * @param  \ProcessMaker\Client\Model\EnvironmentVariablesEditable $environment_variables_editable (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createEnvironmentVariablesRequest($environment_variables_editable)
    {
        // verify the required parameter 'environment_variables_editable' is set
        if ($environment_variables_editable === null || (is_array($environment_variables_editable) && count($environment_variables_editable) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_variables_editable when calling createEnvironmentVariables'
            );
        }

        $resourcePath = '/environment_variables';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($environment_variables_editable)) {
            $_tempBody = $environment_variables_editable;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteEnvironmentVariables
     *
     * Delete a environment_variables
     *
     * @param  string $environment_variables_id ID of environment_variables to return (required)
     *
     * @throws \ProcessMaker\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ProcessMaker\Client\Model\EnvironmentVariables
     */
    public function deleteEnvironmentVariables($environment_variables_id)
    {
        list($response) = $this->deleteEnvironmentVariablesWithHttpInfo($environment_variables_id);
        return $response;
    }

    /**
     * Operation deleteEnvironmentVariablesWithHttpInfo
     *
     * Delete a environment_variables
     *
     * @param  string $environment_variables_id ID of environment_variables to return (required)
     *
     * @throws \ProcessMaker\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ProcessMaker\Client\Model\EnvironmentVariables, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEnvironmentVariablesWithHttpInfo($environment_variables_id)
    {
        $request = $this->deleteEnvironmentVariablesRequest($environment_variables_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 204:
                    if ('\ProcessMaker\Client\Model\EnvironmentVariables' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ProcessMaker\Client\Model\EnvironmentVariables', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ProcessMaker\Client\Model\EnvironmentVariables';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ProcessMaker\Client\Model\EnvironmentVariables',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteEnvironmentVariablesAsync
     *
     * Delete a environment_variables
     *
     * @param  string $environment_variables_id ID of environment_variables to return (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEnvironmentVariablesAsync($environment_variables_id)
    {
        return $this->deleteEnvironmentVariablesAsyncWithHttpInfo($environment_variables_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteEnvironmentVariablesAsyncWithHttpInfo
     *
     * Delete a environment_variables
     *
     * @param  string $environment_variables_id ID of environment_variables to return (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEnvironmentVariablesAsyncWithHttpInfo($environment_variables_id)
    {
        $returnType = '\ProcessMaker\Client\Model\EnvironmentVariables';
        $request = $this->deleteEnvironmentVariablesRequest($environment_variables_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteEnvironmentVariables'
     *
     * @param  string $environment_variables_id ID of environment_variables to return (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteEnvironmentVariablesRequest($environment_variables_id)
    {
        // verify the required parameter 'environment_variables_id' is set
        if ($environment_variables_id === null || (is_array($environment_variables_id) && count($environment_variables_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_variables_id when calling deleteEnvironmentVariables'
            );
        }

        $resourcePath = '/environment_variables/{environment_variables_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($environment_variables_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environment_variables_id' . '}',
                ObjectSerializer::toPathValue($environment_variables_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnvironmentVariables
     *
     * Returns all environmentVariables that the user has access to
     *
     * @param  string $filter Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring. (optional)
     * @param  string $order_by Field to order results by (optional)
     * @param  string $order_direction order_direction (optional, default to 'asc')
     * @param  int $per_page per_page (optional, default to 10)
     * @param  string $include Include data from related models in payload. Comma seperated list. (optional)
     *
     * @throws \ProcessMaker\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ProcessMaker\Client\Model\InlineResponse2001
     */
    public function getEnvironmentVariables($filter = null, $order_by = null, $order_direction = 'asc', $per_page = 10, $include = null)
    {
        list($response) = $this->getEnvironmentVariablesWithHttpInfo($filter, $order_by, $order_direction, $per_page, $include);
        return $response;
    }

    /**
     * Operation getEnvironmentVariablesWithHttpInfo
     *
     * Returns all environmentVariables that the user has access to
     *
     * @param  string $filter Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring. (optional)
     * @param  string $order_by Field to order results by (optional)
     * @param  string $order_direction (optional, default to 'asc')
     * @param  int $per_page (optional, default to 10)
     * @param  string $include Include data from related models in payload. Comma seperated list. (optional)
     *
     * @throws \ProcessMaker\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ProcessMaker\Client\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnvironmentVariablesWithHttpInfo($filter = null, $order_by = null, $order_direction = 'asc', $per_page = 10, $include = null)
    {
        $request = $this->getEnvironmentVariablesRequest($filter, $order_by, $order_direction, $per_page, $include);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\ProcessMaker\Client\Model\InlineResponse2001' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ProcessMaker\Client\Model\InlineResponse2001', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ProcessMaker\Client\Model\InlineResponse2001';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ProcessMaker\Client\Model\InlineResponse2001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnvironmentVariablesAsync
     *
     * Returns all environmentVariables that the user has access to
     *
     * @param  string $filter Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring. (optional)
     * @param  string $order_by Field to order results by (optional)
     * @param  string $order_direction (optional, default to 'asc')
     * @param  int $per_page (optional, default to 10)
     * @param  string $include Include data from related models in payload. Comma seperated list. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentVariablesAsync($filter = null, $order_by = null, $order_direction = 'asc', $per_page = 10, $include = null)
    {
        return $this->getEnvironmentVariablesAsyncWithHttpInfo($filter, $order_by, $order_direction, $per_page, $include)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnvironmentVariablesAsyncWithHttpInfo
     *
     * Returns all environmentVariables that the user has access to
     *
     * @param  string $filter Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring. (optional)
     * @param  string $order_by Field to order results by (optional)
     * @param  string $order_direction (optional, default to 'asc')
     * @param  int $per_page (optional, default to 10)
     * @param  string $include Include data from related models in payload. Comma seperated list. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentVariablesAsyncWithHttpInfo($filter = null, $order_by = null, $order_direction = 'asc', $per_page = 10, $include = null)
    {
        $returnType = '\ProcessMaker\Client\Model\InlineResponse2001';
        $request = $this->getEnvironmentVariablesRequest($filter, $order_by, $order_direction, $per_page, $include);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnvironmentVariables'
     *
     * @param  string $filter Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring. (optional)
     * @param  string $order_by Field to order results by (optional)
     * @param  string $order_direction (optional, default to 'asc')
     * @param  int $per_page (optional, default to 10)
     * @param  string $include Include data from related models in payload. Comma seperated list. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnvironmentVariablesRequest($filter = null, $order_by = null, $order_direction = 'asc', $per_page = 10, $include = null)
    {

        $resourcePath = '/environment_variables';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = ObjectSerializer::toQueryValue($filter);
        }
        // query params
        if ($order_by !== null) {
            $queryParams['order_by'] = ObjectSerializer::toQueryValue($order_by);
        }
        // query params
        if ($order_direction !== null) {
            $queryParams['order_direction'] = ObjectSerializer::toQueryValue($order_direction);
        }
        // query params
        if ($per_page !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($per_page);
        }
        // query params
        if ($include !== null) {
            $queryParams['include'] = ObjectSerializer::toQueryValue($include);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnvironmentVariablesById
     *
     * Get single environment_variables by ID
     *
     * @param  string $environment_variables_id ID of environment_variables to return (required)
     *
     * @throws \ProcessMaker\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ProcessMaker\Client\Model\EnvironmentVariables
     */
    public function getEnvironmentVariablesById($environment_variables_id)
    {
        list($response) = $this->getEnvironmentVariablesByIdWithHttpInfo($environment_variables_id);
        return $response;
    }

    /**
     * Operation getEnvironmentVariablesByIdWithHttpInfo
     *
     * Get single environment_variables by ID
     *
     * @param  string $environment_variables_id ID of environment_variables to return (required)
     *
     * @throws \ProcessMaker\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ProcessMaker\Client\Model\EnvironmentVariables, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnvironmentVariablesByIdWithHttpInfo($environment_variables_id)
    {
        $request = $this->getEnvironmentVariablesByIdRequest($environment_variables_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\ProcessMaker\Client\Model\EnvironmentVariables' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ProcessMaker\Client\Model\EnvironmentVariables', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ProcessMaker\Client\Model\EnvironmentVariables';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ProcessMaker\Client\Model\EnvironmentVariables',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnvironmentVariablesByIdAsync
     *
     * Get single environment_variables by ID
     *
     * @param  string $environment_variables_id ID of environment_variables to return (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentVariablesByIdAsync($environment_variables_id)
    {
        return $this->getEnvironmentVariablesByIdAsyncWithHttpInfo($environment_variables_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnvironmentVariablesByIdAsyncWithHttpInfo
     *
     * Get single environment_variables by ID
     *
     * @param  string $environment_variables_id ID of environment_variables to return (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentVariablesByIdAsyncWithHttpInfo($environment_variables_id)
    {
        $returnType = '\ProcessMaker\Client\Model\EnvironmentVariables';
        $request = $this->getEnvironmentVariablesByIdRequest($environment_variables_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnvironmentVariablesById'
     *
     * @param  string $environment_variables_id ID of environment_variables to return (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnvironmentVariablesByIdRequest($environment_variables_id)
    {
        // verify the required parameter 'environment_variables_id' is set
        if ($environment_variables_id === null || (is_array($environment_variables_id) && count($environment_variables_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_variables_id when calling getEnvironmentVariablesById'
            );
        }

        $resourcePath = '/environment_variables/{environment_variables_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($environment_variables_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environment_variables_id' . '}',
                ObjectSerializer::toPathValue($environment_variables_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateEnvironmentVariables
     *
     * Update a environment_variables
     *
     * @param  string $environment_variables_id ID of environment_variables to return (required)
     * @param  \ProcessMaker\Client\Model\EnvironmentVariablesEditable $environment_variables_editable environment_variables_editable (required)
     *
     * @throws \ProcessMaker\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ProcessMaker\Client\Model\EnvironmentVariables
     */
    public function updateEnvironmentVariables($environment_variables_id, $environment_variables_editable)
    {
        list($response) = $this->updateEnvironmentVariablesWithHttpInfo($environment_variables_id, $environment_variables_editable);
        return $response;
    }

    /**
     * Operation updateEnvironmentVariablesWithHttpInfo
     *
     * Update a environment_variables
     *
     * @param  string $environment_variables_id ID of environment_variables to return (required)
     * @param  \ProcessMaker\Client\Model\EnvironmentVariablesEditable $environment_variables_editable (required)
     *
     * @throws \ProcessMaker\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ProcessMaker\Client\Model\EnvironmentVariables, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateEnvironmentVariablesWithHttpInfo($environment_variables_id, $environment_variables_editable)
    {
        $request = $this->updateEnvironmentVariablesRequest($environment_variables_id, $environment_variables_editable);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\ProcessMaker\Client\Model\EnvironmentVariables' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ProcessMaker\Client\Model\EnvironmentVariables', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ProcessMaker\Client\Model\EnvironmentVariables';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ProcessMaker\Client\Model\EnvironmentVariables',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateEnvironmentVariablesAsync
     *
     * Update a environment_variables
     *
     * @param  string $environment_variables_id ID of environment_variables to return (required)
     * @param  \ProcessMaker\Client\Model\EnvironmentVariablesEditable $environment_variables_editable (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEnvironmentVariablesAsync($environment_variables_id, $environment_variables_editable)
    {
        return $this->updateEnvironmentVariablesAsyncWithHttpInfo($environment_variables_id, $environment_variables_editable)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateEnvironmentVariablesAsyncWithHttpInfo
     *
     * Update a environment_variables
     *
     * @param  string $environment_variables_id ID of environment_variables to return (required)
     * @param  \ProcessMaker\Client\Model\EnvironmentVariablesEditable $environment_variables_editable (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEnvironmentVariablesAsyncWithHttpInfo($environment_variables_id, $environment_variables_editable)
    {
        $returnType = '\ProcessMaker\Client\Model\EnvironmentVariables';
        $request = $this->updateEnvironmentVariablesRequest($environment_variables_id, $environment_variables_editable);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateEnvironmentVariables'
     *
     * @param  string $environment_variables_id ID of environment_variables to return (required)
     * @param  \ProcessMaker\Client\Model\EnvironmentVariablesEditable $environment_variables_editable (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateEnvironmentVariablesRequest($environment_variables_id, $environment_variables_editable)
    {
        // verify the required parameter 'environment_variables_id' is set
        if ($environment_variables_id === null || (is_array($environment_variables_id) && count($environment_variables_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_variables_id when calling updateEnvironmentVariables'
            );
        }
        // verify the required parameter 'environment_variables_editable' is set
        if ($environment_variables_editable === null || (is_array($environment_variables_editable) && count($environment_variables_editable) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_variables_editable when calling updateEnvironmentVariables'
            );
        }

        $resourcePath = '/environment_variables/{environment_variables_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($environment_variables_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environment_variables_id' . '}',
                ObjectSerializer::toPathValue($environment_variables_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($environment_variables_editable)) {
            $_tempBody = $environment_variables_editable;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
