<?php
/**
 * MediaEditable
 *
 * PHP version 5
 *
 * @category Class
 * @package  ProcessMaker\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * ProcessMaker API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@processmaker.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.0-beta2
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ProcessMaker\Client\Model;

use \ArrayAccess;
use \ProcessMaker\Client\ObjectSerializer;

/**
 * MediaEditable Class Doc Comment
 *
 * @category Class
 * @package  ProcessMaker\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class MediaEditable implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'mediaEditable';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'model_id' => 'int',
        'model_type' => 'string',
        'collection_name' => 'string',
        'name' => 'string',
        'file_name' => 'string',
        'mime_type' => 'string',
        'disk' => 'string',
        'size' => 'int',
        'manipulations' => 'string',
        'custom_properties' => 'string',
        'responsive_images' => 'array',
        'order_column' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => 'id',
        'model_id' => 'id',
        'model_type' => 'id',
        'collection_name' => null,
        'name' => null,
        'file_name' => null,
        'mime_type' => null,
        'disk' => null,
        'size' => 'int32',
        'manipulations' => null,
        'custom_properties' => null,
        'responsive_images' => null,
        'order_column' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'model_id' => 'model_id',
        'model_type' => 'model_type',
        'collection_name' => 'collection_name',
        'name' => 'name',
        'file_name' => 'file_name',
        'mime_type' => 'mime_type',
        'disk' => 'disk',
        'size' => 'size',
        'manipulations' => 'manipulations',
        'custom_properties' => 'custom_properties',
        'responsive_images' => 'responsive_images',
        'order_column' => 'order_column'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'model_id' => 'setModelId',
        'model_type' => 'setModelType',
        'collection_name' => 'setCollectionName',
        'name' => 'setName',
        'file_name' => 'setFileName',
        'mime_type' => 'setMimeType',
        'disk' => 'setDisk',
        'size' => 'setSize',
        'manipulations' => 'setManipulations',
        'custom_properties' => 'setCustomProperties',
        'responsive_images' => 'setResponsiveImages',
        'order_column' => 'setOrderColumn'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'model_id' => 'getModelId',
        'model_type' => 'getModelType',
        'collection_name' => 'getCollectionName',
        'name' => 'getName',
        'file_name' => 'getFileName',
        'mime_type' => 'getMimeType',
        'disk' => 'getDisk',
        'size' => 'getSize',
        'manipulations' => 'getManipulations',
        'custom_properties' => 'getCustomProperties',
        'responsive_images' => 'getResponsiveImages',
        'order_column' => 'getOrderColumn'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['model_id'] = isset($data['model_id']) ? $data['model_id'] : null;
        $this->container['model_type'] = isset($data['model_type']) ? $data['model_type'] : null;
        $this->container['collection_name'] = isset($data['collection_name']) ? $data['collection_name'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['file_name'] = isset($data['file_name']) ? $data['file_name'] : null;
        $this->container['mime_type'] = isset($data['mime_type']) ? $data['mime_type'] : null;
        $this->container['disk'] = isset($data['disk']) ? $data['disk'] : null;
        $this->container['size'] = isset($data['size']) ? $data['size'] : null;
        $this->container['manipulations'] = isset($data['manipulations']) ? $data['manipulations'] : null;
        $this->container['custom_properties'] = isset($data['custom_properties']) ? $data['custom_properties'] : null;
        $this->container['responsive_images'] = isset($data['responsive_images']) ? $data['responsive_images'] : null;
        $this->container['order_column'] = isset($data['order_column']) ? $data['order_column'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Represents media files stored in the database
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets model_id
     *
     * @return int|null
     */
    public function getModelId()
    {
        return $this->container['model_id'];
    }

    /**
     * Sets model_id
     *
     * @param int|null $model_id Represents media files stored in the database
     *
     * @return $this
     */
    public function setModelId($model_id)
    {
        $this->container['model_id'] = $model_id;

        return $this;
    }

    /**
     * Gets model_type
     *
     * @return string|null
     */
    public function getModelType()
    {
        return $this->container['model_type'];
    }

    /**
     * Sets model_type
     *
     * @param string|null $model_type Represents media files stored in the database
     *
     * @return $this
     */
    public function setModelType($model_type)
    {
        $this->container['model_type'] = $model_type;

        return $this;
    }

    /**
     * Gets collection_name
     *
     * @return string|null
     */
    public function getCollectionName()
    {
        return $this->container['collection_name'];
    }

    /**
     * Sets collection_name
     *
     * @param string|null $collection_name Represents media files stored in the database
     *
     * @return $this
     */
    public function setCollectionName($collection_name)
    {
        $this->container['collection_name'] = $collection_name;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Represents media files stored in the database
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets file_name
     *
     * @return string|null
     */
    public function getFileName()
    {
        return $this->container['file_name'];
    }

    /**
     * Sets file_name
     *
     * @param string|null $file_name Represents media files stored in the database
     *
     * @return $this
     */
    public function setFileName($file_name)
    {
        $this->container['file_name'] = $file_name;

        return $this;
    }

    /**
     * Gets mime_type
     *
     * @return string|null
     */
    public function getMimeType()
    {
        return $this->container['mime_type'];
    }

    /**
     * Sets mime_type
     *
     * @param string|null $mime_type Represents media files stored in the database
     *
     * @return $this
     */
    public function setMimeType($mime_type)
    {
        $this->container['mime_type'] = $mime_type;

        return $this;
    }

    /**
     * Gets disk
     *
     * @return string|null
     */
    public function getDisk()
    {
        return $this->container['disk'];
    }

    /**
     * Sets disk
     *
     * @param string|null $disk Represents media files stored in the database
     *
     * @return $this
     */
    public function setDisk($disk)
    {
        $this->container['disk'] = $disk;

        return $this;
    }

    /**
     * Gets size
     *
     * @return int|null
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param int|null $size Represents media files stored in the database
     *
     * @return $this
     */
    public function setSize($size)
    {
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets manipulations
     *
     * @return string|null
     */
    public function getManipulations()
    {
        return $this->container['manipulations'];
    }

    /**
     * Sets manipulations
     *
     * @param string|null $manipulations Represents media files stored in the database
     *
     * @return $this
     */
    public function setManipulations($manipulations)
    {
        $this->container['manipulations'] = $manipulations;

        return $this;
    }

    /**
     * Gets custom_properties
     *
     * @return string|null
     */
    public function getCustomProperties()
    {
        return $this->container['custom_properties'];
    }

    /**
     * Sets custom_properties
     *
     * @param string|null $custom_properties Represents media files stored in the database
     *
     * @return $this
     */
    public function setCustomProperties($custom_properties)
    {
        $this->container['custom_properties'] = $custom_properties;

        return $this;
    }

    /**
     * Gets responsive_images
     *
     * @return array|null
     */
    public function getResponsiveImages()
    {
        return $this->container['responsive_images'];
    }

    /**
     * Sets responsive_images
     *
     * @param array|null $responsive_images Represents media files stored in the database
     *
     * @return $this
     */
    public function setResponsiveImages($responsive_images)
    {
        $this->container['responsive_images'] = $responsive_images;

        return $this;
    }

    /**
     * Gets order_column
     *
     * @return int|null
     */
    public function getOrderColumn()
    {
        return $this->container['order_column'];
    }

    /**
     * Sets order_column
     *
     * @param int|null $order_column Represents media files stored in the database
     *
     * @return $this
     */
    public function setOrderColumn($order_column)
    {
        $this->container['order_column'] = $order_column;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


